//수업중 메모


[ 상속 ]

::: 자손 클래스 + extends + 부모 클래스 : 부모클래스에 자손 클래스가 상속, 코드의 중복을 최소화 시킬수 있다. 
		즉 , 최소한의 코드로 새로운 클래스를 만들수 있으며 중복된 코드를 관리할수 있다. 
    = 상속된 상위 클래스(조상,부모클래스)를 호출하는 super()를 사용한다. 
    , 상위 클래스를 호출하는 것이기에 this()와 같이 사용할시 제일 먼저 사용해야한다.
    
     != this 는 같은 클래스 내에 있는 것을 호출 해야한다.
    
    
    
    
    
    Ex)	class Person {    -> 부모클래스
			String name;
			int age;
    	}
    	  
    	class Student extends Person {    -> 부모클래스: Person >  자손클래스: Student

			String major; //전공
			String no; //학번
	
			public Student() {
				super("홍길동",30);    -> super(): 부모클래스인 Person을 호출 
	}								 부모클래스에 있는 변수 값 name = "홍길동", age = 30 에 저장 됨.
	
}




** 참조관계 ::: 상위클래스는 하위클래스를 참조 가능 but 반대의 경우는 안됨  ,,,, 하위클래스에 있는 자원에 접근이 불가능..!!

[ Object 클래스 -- 모든 최상위 상속 클래스 = 시조, 단조 ]
::: 상속 되지 않은 모든 클래스 에 자동으로 extends Object 가 붙어 자동으로 Object에 상속된다.
** 이미 어떤 클래스로부터 상속받고 있는 클래스에 대해서는 extends Object가 붙지 않는다.




/* 상속 : 부모클래스에 자식클래스가 상속되는것 = 중복되는 코드값을 관리 할 수 있다.
			 *  ex ) class 자식클래스 + extends + 부모클래스   
			 *  		자식클래스에서 부모클래스 변수(코드)값을 호출할때 super()을 사용한다.
			 *  
			 *  *super() : this()보다 상위 클래스를 호출하는 생성자 즉, 부모(조상)클래스를 호출하므로 제일 먼저 쓴다. 
			 *  
			 *  *Object 클래스 :: 모든 클래스들의 최상위 클래스로 시조급 클래스 이다.
			 *      + 상속되지 않은 클래스에 자동으로 extends + Object 가 붙으며, 상속되지 않은 클래스에는 붙어 표현되지 않으나 Object 클래스에 상속되어있다라고 보면 된다.
			 *      
			 *  
			 *  
			 *  tip. 상위클래스는 하위클래스를 참조할수 있으나 하위클래스를 접근할수 없으며,  반대의 경우에는 하위클래스가 상위클래스를 참조할수 없고 상위클래스에 접근할 수 있다.
			 *   		부모 클래스 Preson  자식클래스 WorkStudent
			 *   		
			 *   	Person 홍길동 = new  WorkStudent("....") => 참조는 가능하시만 출력과 같은 접근은 X
			 *   	
			 *   	Workstudent 홍길동 = new Person();  
			 *						   ------------- -> 에러
			 *
			 *  
			 *   단, 오버라이딩을 이용시 상위클래스가 하위클래스에 접근할수있다.
			 *   변수값 no ,  같은 출력 메소드(내용은 다를때)가 있을때 하위클래스 메소드로 출력된다.
			 *   
			 *   
			 *   
			 *  오버라이딩 :  조상클래스로부터 상속받은 메서드의 내용을 변경하는 것 = change, modify
			 *  오버로딩 : 기존에 없는 새로운 메서드를 정의하는 것 = new
			 * */