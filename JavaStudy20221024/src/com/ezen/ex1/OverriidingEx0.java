package com.ezen.ex1;

public class OverriidingEx0 {

	public static void main(String[] args) {
		
		
		/* -수업 정리-
		 * 사람 클래스 참조변수는 사람 클래스 안에 있는 자원 및 상속 받은 Object클래스만 접근 가능하다.
		 * 사람 클래스를 상속받은 학생, 근로학생 클래스 안 자원은 접근이 불가능하다.
		 * 다만, 사람 클래스 안에 있는 메소드를 하위 클래스에서 재정의(Overriding)하면 그 메소드 자원은 접근이 가능하다.
		 * 
		 * ->  이 기능은 다형성에서 알수 있다.*/
		
		/* 7-3 오버라이딩의 정의와 필요성에 대해서 설명하시오
		 * 
		 *  상위클래스가 하위클래스에 접근하기 위해 상속받은 매서드의 내용을 변경하는 것
		 *  오버라이딩 이란 조상 클래스로부터 상속받은 메서드를 자손 클래스(overriding)에 맞게 재정의 하는 것 을 말한다 .
		 *  조상 클래스로부터 상속받은 메서드를 자손 클래스에서 그대로 사용할 수 없는 경우가 많기 때문에 오버라이딩이 필요하다.
		 * */
		
		
		
		
		
//		사람 임채리 = new 근로학생();
//		임채리.   -> 멤버변수 메소드는 접근이 불가능 하나 참조는 가능
		
//		근로학생 임채리 = new 근로학생();
//		임채리.   
	
		사람 임채리 = new 근로학생();
		임채리.sleep(); //오버라이딩은 참조형 클래스에 접근하는 것이 아니고 , 참조대상 클래스에 접근한다.??????
//		--------------> 1 출력 x  -> 3 출력 o
		사람 윤민호 = new 학생();
		윤민호.sleep(); //오버라이딩 처리
//		--------------> 1 출력 x  -> 2 출력 o
	}

}

// 상위클래스와 하위클래스에 같은 메서드가 있으면 하위클래스의 메서드를 불러온다. 
class 사람 {
	int name;
	int age;
	void sleep() {   //1
		System.out.println("사람은 잠을 잔다.");
	}
}

class 학생 extends 사람 {
	String major; //전공
	void study() {
		System.out.println("학생은 공부한다.");
	}
	void sleep() { // 상위 클래스에도 있는 메소드를 똑같이 만드는걸 overriding 이라고 한다. //2
//		this.sleep(); //4 ->  2과 4번을 무한 돌림 = 에러 
		System.out.println("학생은 잠을 잔다.");
	}
}
class 근로학생 extends 학생 {
	String job; // 학내에서 하는일
	void work() {
		System.out.println("근로학생은 일을 한다.");
	}
	

	@Override //어노테이션 -> 안 붙여도 되나, 붙여주는 것이 프로그램의 안정성을 높일 수 있다.
	void sleep() {	//3
		System.out.println("근로학생은 잠을 잔다.");
		super.sleep(); // 오버라이딩 후 같이 출력하고 싶다면 super를 이용
	}
	
}